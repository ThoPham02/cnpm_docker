// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userTblFieldNames          = builder.RawFieldNames(&UserTbl{})
	userTblRows                = strings.Join(userTblFieldNames, ",")
	userTblRowsExpectAutoSet   = strings.Join(stringx.Remove(userTblFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userTblRowsWithPlaceHolder = strings.Join(stringx.Remove(userTblFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	userTblModel interface {
		Insert(ctx context.Context, data *UserTbl) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UserTbl, error)
		Update(ctx context.Context, data *UserTbl) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserTblModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UserTbl struct {
		Id       int64          `db:"id"`
		Fullname sql.NullString `db:"fullname"`
		Email    string         `db:"email"`
		HashPw   sql.NullString `db:"hash_pw"`
	}
)

func newUserTblModel(conn sqlx.SqlConn) *defaultUserTblModel {
	return &defaultUserTblModel{
		conn:  conn,
		table: "`user_tbl`",
	}
}

func (m *defaultUserTblModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUserTblModel) FindOne(ctx context.Context, id int64) (*UserTbl, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userTblRows, m.table)
	var resp UserTbl
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserTblModel) Insert(ctx context.Context, data *UserTbl) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, userTblRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.Fullname, data.Email, data.HashPw)
	return ret, err
}

func (m *defaultUserTblModel) Update(ctx context.Context, data *UserTbl) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userTblRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Fullname, data.Email, data.HashPw, data.Id)
	return err
}

func (m *defaultUserTblModel) tableName() string {
	return m.table
}
